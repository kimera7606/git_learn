#aqui veremos los codigos segun la guia profesional de GIT 
------------------------------------------------------------------
#instalacion de GIT:
sudo apt-get install git 
-----------------------------------------------------------------
#configuraciones de git personal 
git config --global user.name 'angel'
git config --global user.email 'angel@gmail.com'

#comprobar configuracion:
git config --list

#tambien puedes comprobar cada dato por ejemplo:
git config user.name (te dara como resultado el nombre del usuario ese sera tu input)
-----------------------------------------------------------------------------------------
#fundamentos
git init 
git add <file> #añade un archivo al staginfg o preparacion para luego ser confirmado
git add . #sirve para añadir automaticamente todos los archivos que esten en el repositorio

git commit -m 'messaje' #confirma el directorio para guardarlo
git commit -am 'añade y deja mensaje de confirmacion' 
--------------------------------------------------------------------------------------------
#remoto
git clone <url> #trae un repositorio con toda la informacion del mismo incluyendo sus ramas y el historial
git clone <url> <name> #tambien puedes renombrar o colocarle un nombre distinto al repositorio que te estas trayendo del remoto
------------------------------------------------------------------------------------------------------------------------------------
#revisando los estados de tus documentos repositorios y demas archivos contenido en el directorio local de git
git status
------------------------------------------------------------------------------------------------------------------------------------
#crear archivo gitignore para que ignore todos aquellos archivos de los cuales no quieres llevar ningun seguimiento
#se crea un archivo llamado .gitignore este archivo contendra todas aquellas excepciones de las cuales no quieres que git haga seguimiento
#existe una pagina 
https://github.com/github/gitignore
la cual tiene los ignore generales de cualquier proyecto
ejemplos: 
# ignora los archivos terminados en .a
*.a
# pero no lib.a, aun cuando había ignorado los archivos terminados en .a en la línea
anterior
!lib.a
# ignora unicamente el archivo TODO de la raiz, no subdir/TODO
/TODO
# ignora todos los archivos del directorio build/
build/
# ignora doc/notes.txt, pero no este: doc/server/arch.txt
doc/*.txt
# ignora todos los archivos .txt del directorio doc/
doc/**/*.txt
-----------------------------------------------------------------------------------------------------------------------------
#ver cambios preparados y no preparados
#no preparados
git diff #mostrara los cambios no preparados, es decir estan modificados pero aun no han sido agregados o no se encuentran en staging 
        #la diferencia entre la modificada sin preparar  y el ultimo commit
#preparados
git diff --staged #muestra los las diferencias entre los preparados y el ultimo commit 
------------------------------------------------------------------------------------------------------------------------------------
eliminar archivos
git rm <file> #lo elimina pero luego debes guardar el cambio con un commit 
----------------------------------------------------------------------------------
#renombrar archivos
git mv <file>
#luego se debe realizar un commit normal para que quede en el historial de log
-----------------------------------------------------------------------------------------------
#ver historial de confirmaciones
para ver el historial de confirmaciones deberiamos usar git log el cual nos trae de manera descendiente los diferentes commit del repositorio
git log 

git log -p #muestra las diferencias introducidas en cada commit como un diff entre cada commit detallado
git log -(n) #donde n es cualquier entero que quiere limitar las ultimos commit en numeros o veces 
#puedes combinar ambos usando
git log -p -2 
git log --stat #muestra las stadisticas de cada confirmacion o commit 

git log --pretty=oneline #muestra las confirmaciones en una sola linea mas directa y corta commit con su respectivo id 

#otras opciones que que podemos realizar seguimiento
git log --committer <name> # muestra los commit cuyo confirmador coincide con la cadena especificada
git log --author <name>
git log (n) donde n sera el numero de confirmaciones 
-----------------------------------------------------------------------------------------------------------------------------
#deshacer cosas:
git commit -amend -m #pega la preparacion actual con el commit pasado incluso puedes dejar directo el cambio del commit anterior es decir el msj



